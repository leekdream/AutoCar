
AutoCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000de2  00000e76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000639  00800110  00800110  00000e86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000239d  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f40  00000000  00000000  0000348d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000156b  00000000  00000000  000043cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  00005938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d73  00000000  00000000  00005e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000138a  00000000  00000000  00006b73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
   2:	00 00       	nop
   4:	76 c0       	rjmp	.+236    	; 0xf2 <__bad_interrupt>
   6:	00 00       	nop
   8:	74 c0       	rjmp	.+232    	; 0xf2 <__bad_interrupt>
   a:	00 00       	nop
   c:	72 c0       	rjmp	.+228    	; 0xf2 <__bad_interrupt>
   e:	00 00       	nop
  10:	70 c0       	rjmp	.+224    	; 0xf2 <__bad_interrupt>
  12:	00 00       	nop
  14:	6e c0       	rjmp	.+220    	; 0xf2 <__bad_interrupt>
  16:	00 00       	nop
  18:	6c c0       	rjmp	.+216    	; 0xf2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6a c0       	rjmp	.+212    	; 0xf2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	68 c0       	rjmp	.+208    	; 0xf2 <__bad_interrupt>
  22:	00 00       	nop
  24:	66 c0       	rjmp	.+204    	; 0xf2 <__bad_interrupt>
  26:	00 00       	nop
  28:	64 c0       	rjmp	.+200    	; 0xf2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	62 c0       	rjmp	.+196    	; 0xf2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	60 c0       	rjmp	.+192    	; 0xf2 <__bad_interrupt>
  32:	00 00       	nop
  34:	5d c3       	rjmp	.+1722   	; 0x6f0 <__vector_13>
  36:	00 00       	nop
  38:	5c c0       	rjmp	.+184    	; 0xf2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5a c0       	rjmp	.+180    	; 0xf2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	58 c0       	rjmp	.+176    	; 0xf2 <__bad_interrupt>
  42:	00 00       	nop
  44:	56 c0       	rjmp	.+172    	; 0xf2 <__bad_interrupt>
  46:	00 00       	nop
  48:	54 c0       	rjmp	.+168    	; 0xf2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	52 c0       	rjmp	.+164    	; 0xf2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	50 c0       	rjmp	.+160    	; 0xf2 <__bad_interrupt>
  52:	00 00       	nop
  54:	4e c0       	rjmp	.+156    	; 0xf2 <__bad_interrupt>
  56:	00 00       	nop
  58:	4c c0       	rjmp	.+152    	; 0xf2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4a c0       	rjmp	.+148    	; 0xf2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	48 c0       	rjmp	.+144    	; 0xf2 <__bad_interrupt>
  62:	00 00       	nop
  64:	46 c0       	rjmp	.+140    	; 0xf2 <__bad_interrupt>
  66:	00 00       	nop
  68:	44 c0       	rjmp	.+136    	; 0xf2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	42 c0       	rjmp	.+132    	; 0xf2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	40 c0       	rjmp	.+128    	; 0xf2 <__bad_interrupt>
  72:	00 00       	nop
  74:	3e c0       	rjmp	.+124    	; 0xf2 <__bad_interrupt>
  76:	00 00       	nop
  78:	3c c0       	rjmp	.+120    	; 0xf2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3a c0       	rjmp	.+116    	; 0xf2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	38 c0       	rjmp	.+112    	; 0xf2 <__bad_interrupt>
  82:	00 00       	nop
  84:	36 c0       	rjmp	.+108    	; 0xf2 <__bad_interrupt>
  86:	00 00       	nop
  88:	34 c0       	rjmp	.+104    	; 0xf2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7f 01       	movw	r14, r30
  8e:	cb 01       	movw	r24, r22
  90:	cb 01       	movw	r24, r22
  92:	cb 01       	movw	r24, r22
  94:	83 01       	movw	r16, r6
  96:	cb 01       	movw	r24, r22
  98:	cb 01       	movw	r24, r22
  9a:	cb 01       	movw	r24, r22
  9c:	cb 01       	movw	r24, r22
  9e:	cb 01       	movw	r24, r22
  a0:	8b 01       	movw	r16, r22
  a2:	cb 01       	movw	r24, r22
  a4:	cb 01       	movw	r24, r22
  a6:	cb 01       	movw	r24, r22
  a8:	cb 01       	movw	r24, r22
  aa:	cb 01       	movw	r24, r22
  ac:	87 01       	movw	r16, r14
  ae:	8f 01       	movw	r16, r30
  b0:	cb 01       	movw	r24, r22
  b2:	b9 01       	movw	r22, r18
  b4:	93 01       	movw	r18, r6
  b6:	a6 01       	movw	r20, r12

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d0 e4       	ldi	r29, 0x40	; 64
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e2 ee       	ldi	r30, 0xE2	; 226
  cc:	fd e0       	ldi	r31, 0x0D	; 13
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	0b bf       	out	0x3b, r16	; 59
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
  d4:	07 90       	elpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	a0 31       	cpi	r26, 0x10	; 16
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
  de:	27 e0       	ldi	r18, 0x07	; 7
  e0:	a0 e1       	ldi	r26, 0x10	; 16
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
  e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
  e8:	a9 34       	cpi	r26, 0x49	; 73
  ea:	b2 07       	cpc	r27, r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
  ee:	9d d1       	rcall	.+826    	; 0x42a <main>
  f0:	76 c6       	rjmp	.+3308   	; 0xdde <_exit>

000000f2 <__bad_interrupt>:
  f2:	86 cf       	rjmp	.-244    	; 0x0 <__vectors>

000000f4 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  f8:	ec 01       	movw	r28, r24
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  fa:	4d d4       	rcall	.+2202   	; 0x996 <vTaskSuspendAll>
  fc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 100:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 104:	c9 01       	movw	r24, r18
 106:	8c 0f       	add	r24, r28
 108:	9d 1f       	adc	r25, r29
 10a:	8c 3d       	cpi	r24, 0xDC	; 220
 10c:	45 e0       	ldi	r20, 0x05	; 5
 10e:	94 07       	cpc	r25, r20
 110:	58 f4       	brcc	.+22     	; 0x128 <pvPortMalloc+0x34>
 112:	28 17       	cp	r18, r24
 114:	39 07       	cpc	r19, r25
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 116:	58 f4       	brcc	.+22     	; 0x12e <pvPortMalloc+0x3a>
 118:	e9 01       	movw	r28, r18
 11a:	ce 5e       	subi	r28, 0xEE	; 238
			xNextFreeByte += xWantedSize;			
 11c:	de 4f       	sbci	r29, 0xFE	; 254
 11e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 122:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
 126:	05 c0       	rjmp	.+10     	; 0x132 <pvPortMalloc+0x3e>
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <pvPortMalloc+0x3e>
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	#endif	

	return pvReturn;
}
 132:	f8 d4       	rcall	.+2544   	; 0xb24 <xTaskResumeAll>
 134:	ce 01       	movw	r24, r28
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 13c:	08 95       	ret

0000013e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 13e:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 140:	03 96       	adiw	r24, 0x03	; 3
 142:	92 83       	std	Z+2, r25	; 0x02
 144:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	3f ef       	ldi	r19, 0xFF	; 255
 14a:	34 83       	std	Z+4, r19	; 0x04
 14c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 14e:	96 83       	std	Z+6, r25	; 0x06
 150:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 152:	90 87       	std	Z+8, r25	; 0x08
 154:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 156:	10 82       	st	Z, r1
 158:	08 95       	ret

0000015a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 15a:	fc 01       	movw	r30, r24
 15c:	11 86       	std	Z+9, r1	; 0x09
 15e:	10 86       	std	Z+8, r1	; 0x08
 160:	08 95       	ret

00000162 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	fc 01       	movw	r30, r24
 168:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 16a:	21 81       	ldd	r18, Z+1	; 0x01
 16c:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 16e:	e9 01       	movw	r28, r18
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	9b 81       	ldd	r25, Y+3	; 0x03
 174:	13 96       	adiw	r26, 0x03	; 3
 176:	9c 93       	st	X, r25
 178:	8e 93       	st	-X, r24
 17a:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	92 81       	ldd	r25, Z+2	; 0x02
 180:	15 96       	adiw	r26, 0x05	; 5
 182:	9c 93       	st	X, r25
 184:	8e 93       	st	-X, r24
 186:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	9b 81       	ldd	r25, Y+3	; 0x03
 18c:	ec 01       	movw	r28, r24
 18e:	7d 83       	std	Y+5, r23	; 0x05
 190:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 192:	e9 01       	movw	r28, r18
 194:	7b 83       	std	Y+3, r23	; 0x03
 196:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 198:	72 83       	std	Z+2, r23	; 0x02
 19a:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 19c:	19 96       	adiw	r26, 0x09	; 9
 19e:	fc 93       	st	X, r31
 1a0:	ee 93       	st	-X, r30
 1a2:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 83       	st	Z, r24
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 1b6:	48 81       	ld	r20, Y
 1b8:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1ba:	4f 3f       	cpi	r20, 0xFF	; 255
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	52 07       	cpc	r21, r18
 1c0:	31 f4       	brne	.+12     	; 0x1ce <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1c2:	dc 01       	movw	r26, r24
 1c4:	17 96       	adiw	r26, 0x07	; 7
 1c6:	ed 91       	ld	r30, X+
 1c8:	fc 91       	ld	r31, X
 1ca:	18 97       	sbiw	r26, 0x08	; 8
 1cc:	17 c0       	rjmp	.+46     	; 0x1fc <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1ce:	fc 01       	movw	r30, r24
 1d0:	33 96       	adiw	r30, 0x03	; 3
 1d2:	dc 01       	movw	r26, r24
 1d4:	15 96       	adiw	r26, 0x05	; 5
 1d6:	2d 91       	ld	r18, X+
 1d8:	3c 91       	ld	r19, X
 1da:	16 97       	sbiw	r26, 0x06	; 6
 1dc:	d9 01       	movw	r26, r18
 1de:	2d 91       	ld	r18, X+
 1e0:	3c 91       	ld	r19, X
 1e2:	42 17       	cp	r20, r18
 1e4:	53 07       	cpc	r21, r19
 1e6:	50 f0       	brcs	.+20     	; 0x1fc <vListInsert+0x4c>
 1e8:	02 80       	ldd	r0, Z+2	; 0x02
 1ea:	f3 81       	ldd	r31, Z+3	; 0x03
 1ec:	e0 2d       	mov	r30, r0
 1ee:	a2 81       	ldd	r26, Z+2	; 0x02
 1f0:	b3 81       	ldd	r27, Z+3	; 0x03
 1f2:	2d 91       	ld	r18, X+
 1f4:	3c 91       	ld	r19, X
 1f6:	42 17       	cp	r20, r18
 1f8:	53 07       	cpc	r21, r19
 1fa:	b0 f7       	brcc	.-20     	; 0x1e8 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	bb 83       	std	Y+3, r27	; 0x03
 202:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	dc 93       	st	X, r29
 208:	ce 93       	st	-X, r28
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 20c:	fd 83       	std	Y+5, r31	; 0x05
 20e:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 210:	d3 83       	std	Z+3, r29	; 0x03
 212:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 214:	99 87       	std	Y+9, r25	; 0x09
 216:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 218:	fc 01       	movw	r30, r24
 21a:	20 81       	ld	r18, Z
 21c:	2f 5f       	subi	r18, 0xFF	; 255
 21e:	20 83       	st	Z, r18
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 226:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 228:	a2 81       	ldd	r26, Z+2	; 0x02
 22a:	b3 81       	ldd	r27, Z+3	; 0x03
 22c:	84 81       	ldd	r24, Z+4	; 0x04
 22e:	95 81       	ldd	r25, Z+5	; 0x05
 230:	15 96       	adiw	r26, 0x05	; 5
 232:	9c 93       	st	X, r25
 234:	8e 93       	st	-X, r24
 236:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 238:	a4 81       	ldd	r26, Z+4	; 0x04
 23a:	b5 81       	ldd	r27, Z+5	; 0x05
 23c:	82 81       	ldd	r24, Z+2	; 0x02
 23e:	93 81       	ldd	r25, Z+3	; 0x03
 240:	13 96       	adiw	r26, 0x03	; 3
 242:	9c 93       	st	X, r25
 244:	8e 93       	st	-X, r24
 246:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 248:	a0 85       	ldd	r26, Z+8	; 0x08
 24a:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 24c:	11 96       	adiw	r26, 0x01	; 1
 24e:	8d 91       	ld	r24, X+
 250:	9c 91       	ld	r25, X
 252:	12 97       	sbiw	r26, 0x02	; 2
 254:	e8 17       	cp	r30, r24
 256:	f9 07       	cpc	r31, r25
 258:	31 f4       	brne	.+12     	; 0x266 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 25a:	84 81       	ldd	r24, Z+4	; 0x04
 25c:	95 81       	ldd	r25, Z+5	; 0x05
 25e:	12 96       	adiw	r26, 0x02	; 2
 260:	9c 93       	st	X, r25
 262:	8e 93       	st	-X, r24
 264:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 266:	11 86       	std	Z+9, r1	; 0x09
 268:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 26a:	8c 91       	ld	r24, X
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	8c 93       	st	X, r24
 270:	08 95       	ret

00000272 <initUSART>:
		OCR1A=1500;
		break;		
	}
}
void Car_Init(){
	dir_state = INIT;	
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	81 f0       	breq	.+32     	; 0x296 <initUSART+0x24>
 276:	e1 ec       	ldi	r30, 0xC1	; 193
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 61       	ori	r24, 0x18	; 24
 27e:	80 83       	st	Z, r24
 280:	e2 ec       	ldi	r30, 0xC2	; 194
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	86 60       	ori	r24, 0x06	; 6
 288:	80 83       	st	Z, r24
 28a:	83 e3       	ldi	r24, 0x33	; 51
 28c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 290:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 294:	08 95       	ret
 296:	e9 ec       	ldi	r30, 0xC9	; 201
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	88 61       	ori	r24, 0x18	; 24
 29e:	80 83       	st	Z, r24
 2a0:	ea ec       	ldi	r30, 0xCA	; 202
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	86 60       	ori	r24, 0x06	; 6
 2a8:	80 83       	st	Z, r24
 2aa:	83 e3       	ldi	r24, 0x33	; 51
 2ac:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 2b0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 2b4:	08 95       	ret

000002b6 <USART_Receive>:
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	41 f0       	breq	.+16     	; 0x2ca <USART_Receive+0x14>
 2ba:	e0 ec       	ldi	r30, 0xC0	; 192
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	ec f7       	brge	.-6      	; 0x2be <USART_Receive+0x8>
 2c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2c8:	08 95       	ret
 2ca:	e8 ec       	ldi	r30, 0xC8	; 200
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	88 23       	and	r24, r24
 2d2:	ec f7       	brge	.-6      	; 0x2ce <USART_Receive+0x18>
 2d4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2d8:	08 95       	ret

000002da <BlueRe>:
 2da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2de:	88 23       	and	r24, r24
 2e0:	0c f0       	brlt	.+2      	; 0x2e4 <BlueRe+0xa>
 2e2:	59 c0       	rjmp	.+178    	; 0x396 <BlueRe+0xbc>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	e7 df       	rcall	.-50     	; 0x2b6 <USART_Receive>
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	e2 54       	subi	r30, 0x42	; 66
 2ee:	f1 09       	sbc	r31, r1
 2f0:	e6 31       	cpi	r30, 0x16	; 22
 2f2:	f1 05       	cpc	r31, r1
 2f4:	08 f0       	brcs	.+2      	; 0x2f8 <BlueRe+0x1e>
 2f6:	4f c0       	rjmp	.+158    	; 0x396 <BlueRe+0xbc>
 2f8:	ea 5b       	subi	r30, 0xBA	; 186
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	51 c5       	rjmp	.+2722   	; 0xda0 <__tablejump2__>
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <dir_state>
 304:	08 95       	ret
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <dir_state>
 30c:	08 95       	ret
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <dir_state>
 314:	08 95       	ret
 316:	84 e0       	ldi	r24, 0x04	; 4
 318:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <dir_state>
 31c:	08 95       	ret
 31e:	85 e0       	ldi	r24, 0x05	; 5
 320:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <dir_state>
 324:	08 95       	ret
 326:	82 e8       	ldi	r24, 0x82	; 130
 328:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 32c:	8a e1       	ldi	r24, 0x1A	; 26
 32e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 332:	80 e2       	ldi	r24, 0x20	; 32
 334:	9e e4       	ldi	r25, 0x4E	; 78
 336:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 33a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 33e:	88 ee       	ldi	r24, 0xE8	; 232
 340:	93 e0       	ldi	r25, 0x03	; 3
 342:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 346:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 34a:	08 95       	ret
 34c:	82 e8       	ldi	r24, 0x82	; 130
 34e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 352:	8a e1       	ldi	r24, 0x1A	; 26
 354:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 358:	80 e2       	ldi	r24, 0x20	; 32
 35a:	9e e4       	ldi	r25, 0x4E	; 78
 35c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 360:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 364:	80 ed       	ldi	r24, 0xD0	; 208
 366:	97 e0       	ldi	r25, 0x07	; 7
 368:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 36c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 370:	08 95       	ret
 372:	82 e8       	ldi	r24, 0x82	; 130
 374:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 378:	8a e1       	ldi	r24, 0x1A	; 26
 37a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 37e:	80 e2       	ldi	r24, 0x20	; 32
 380:	9e e4       	ldi	r25, 0x4E	; 78
 382:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 386:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 38a:	8c ed       	ldi	r24, 0xDC	; 220
 38c:	95 e0       	ldi	r25, 0x05	; 5
 38e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 392:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 396:	08 95       	ret

00000398 <Car_Tick>:
}

void Car_Tick(){
	//Actions
	switch(dir_state){
 398:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <dir_state>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	89 f0       	breq	.+34     	; 0x3c2 <Car_Tick+0x2a>
 3a0:	28 f4       	brcc	.+10     	; 0x3ac <Car_Tick+0x14>
 3a2:	88 23       	and	r24, r24
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <Car_Tick+0x20>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	49 f0       	breq	.+18     	; 0x3bc <Car_Tick+0x24>
 3aa:	16 c0       	rjmp	.+44     	; 0x3d8 <Car_Tick+0x40>
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	79 f0       	breq	.+30     	; 0x3ce <Car_Tick+0x36>
 3b0:	58 f0       	brcs	.+22     	; 0x3c8 <Car_Tick+0x30>
 3b2:	85 30       	cpi	r24, 0x05	; 5
 3b4:	79 f0       	breq	.+30     	; 0x3d4 <Car_Tick+0x3c>
 3b6:	10 c0       	rjmp	.+32     	; 0x3d8 <Car_Tick+0x40>
		case INIT:
		PORTA=0x00;
 3b8:	12 b8       	out	0x02, r1	; 2
		break;
 3ba:	0f c0       	rjmp	.+30     	; 0x3da <Car_Tick+0x42>
		case Forward:
		PORTA = 0x0A;
 3bc:	8a e0       	ldi	r24, 0x0A	; 10
 3be:	82 b9       	out	0x02, r24	; 2
		break;
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <Car_Tick+0x42>
		case Backward:
		PORTA = 0x05;
 3c2:	85 e0       	ldi	r24, 0x05	; 5
 3c4:	82 b9       	out	0x02, r24	; 2
		break;
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <Car_Tick+0x42>
		case Right:
		PORTA = 0x09;
 3c8:	89 e0       	ldi	r24, 0x09	; 9
 3ca:	82 b9       	out	0x02, r24	; 2
		break;
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <Car_Tick+0x42>
		case Left:
		PORTA = 0x06;
 3ce:	86 e0       	ldi	r24, 0x06	; 6
 3d0:	82 b9       	out	0x02, r24	; 2
		break;
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <Car_Tick+0x42>
		case brake:
		PORTA = 0x00;
 3d4:	12 b8       	out	0x02, r1	; 2
		break;
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <Car_Tick+0x42>
		default:
		PORTA = 0x00;
		break;
	}
	BlueRe();
 3d8:	12 b8       	out	0x02, r1	; 2
 3da:	7f cf       	rjmp	.-258    	; 0x2da <BlueRe>
 3dc:	08 95       	ret

000003de <CarTask>:
		OCR1A=1500;
		break;		
	}
}
void Car_Init(){
	dir_state = INIT;	
 3de:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <dir_state>
{
	Car_Init();
   for(;;) 
   { 	
	Car_Tick();   
	vTaskDelay(10); 
 3e2:	da df       	rcall	.-76     	; 0x398 <Car_Tick>
 3e4:	8a e0       	ldi	r24, 0x0A	; 10
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	1e d4       	rcall	.+2108   	; 0xc26 <vTaskDelay>
 3ea:	fb cf       	rjmp	.-10     	; 0x3e2 <CarTask+0x4>

000003ec <StartSecPulse>:
   } 
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 3ec:	af 92       	push	r10
 3ee:	bf 92       	push	r11
 3f0:	cf 92       	push	r12
 3f2:	df 92       	push	r13
 3f4:	ef 92       	push	r14
 3f6:	ff 92       	push	r15
 3f8:	0f 93       	push	r16
	xTaskCreate(CarTask, (signed portCHAR *)"CarTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 3fa:	a1 2c       	mov	r10, r1
 3fc:	b1 2c       	mov	r11, r1
 3fe:	c1 2c       	mov	r12, r1
 400:	d1 2c       	mov	r13, r1
 402:	e1 2c       	mov	r14, r1
 404:	f1 2c       	mov	r15, r1
 406:	08 2f       	mov	r16, r24
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	45 e5       	ldi	r20, 0x55	; 85
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	71 e0       	ldi	r23, 0x01	; 1
 414:	8f ee       	ldi	r24, 0xEF	; 239
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	a2 d1       	rcall	.+836    	; 0x75e <xTaskGenericCreate>
}	
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	df 90       	pop	r13
 422:	cf 90       	pop	r12
 424:	bf 90       	pop	r11
 426:	af 90       	pop	r10
 428:	08 95       	ret

0000042a <main>:
 
int main(void) 
{ 
   DDRA = 0xFF; 
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	81 b9       	out	0x01, r24	; 1
   DDRD=0xF0;
 42e:	80 ef       	ldi	r24, 0xF0	; 240
 430:	8a b9       	out	0x0a, r24	; 10
   initUSART(0); 
 432:	80 e0       	ldi	r24, 0x00	; 0
   StartSecPulse(1); 
 434:	1e df       	rcall	.-452    	; 0x272 <initUSART>
   vTaskStartScheduler(); 
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	d9 df       	rcall	.-78     	; 0x3ec <StartSecPulse>

	
	return 0; 
 43a:	84 d2       	rcall	.+1288   	; 0x944 <vTaskStartScheduler>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	08 95       	ret

00000442 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 442:	31 e1       	ldi	r19, 0x11	; 17
 444:	fc 01       	movw	r30, r24
 446:	30 83       	st	Z, r19
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	22 e2       	ldi	r18, 0x22	; 34
 44c:	20 83       	st	Z, r18
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	a3 e3       	ldi	r26, 0x33	; 51
 452:	a0 83       	st	Z, r26
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	60 83       	st	Z, r22
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	70 83       	st	Z, r23
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	10 82       	st	Z, r1
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	60 e8       	ldi	r22, 0x80	; 128
 464:	60 83       	st	Z, r22
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	10 82       	st	Z, r1
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	60 83       	st	Z, r22
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	60 83       	st	Z, r22
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	64 e0       	ldi	r22, 0x04	; 4
 47a:	60 83       	st	Z, r22
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	65 e0       	ldi	r22, 0x05	; 5
 480:	60 83       	st	Z, r22
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	66 e0       	ldi	r22, 0x06	; 6
 486:	60 83       	st	Z, r22
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	67 e0       	ldi	r22, 0x07	; 7
 48c:	60 83       	st	Z, r22
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	68 e0       	ldi	r22, 0x08	; 8
 492:	60 83       	st	Z, r22
 494:	31 97       	sbiw	r30, 0x01	; 1
 496:	69 e0       	ldi	r22, 0x09	; 9
 498:	60 83       	st	Z, r22
 49a:	31 97       	sbiw	r30, 0x01	; 1
 49c:	60 e1       	ldi	r22, 0x10	; 16
 49e:	60 83       	st	Z, r22
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	30 83       	st	Z, r19
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	32 e1       	ldi	r19, 0x12	; 18
 4a8:	30 83       	st	Z, r19
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	33 e1       	ldi	r19, 0x13	; 19
 4ae:	30 83       	st	Z, r19
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	34 e1       	ldi	r19, 0x14	; 20
 4b4:	30 83       	st	Z, r19
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	35 e1       	ldi	r19, 0x15	; 21
 4ba:	30 83       	st	Z, r19
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	36 e1       	ldi	r19, 0x16	; 22
 4c0:	30 83       	st	Z, r19
 4c2:	31 97       	sbiw	r30, 0x01	; 1
 4c4:	37 e1       	ldi	r19, 0x17	; 23
 4c6:	30 83       	st	Z, r19
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	38 e1       	ldi	r19, 0x18	; 24
 4cc:	30 83       	st	Z, r19
 4ce:	31 97       	sbiw	r30, 0x01	; 1
 4d0:	39 e1       	ldi	r19, 0x19	; 25
 4d2:	30 83       	st	Z, r19
 4d4:	31 97       	sbiw	r30, 0x01	; 1
 4d6:	30 e2       	ldi	r19, 0x20	; 32
 4d8:	30 83       	st	Z, r19
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	31 e2       	ldi	r19, 0x21	; 33
 4de:	30 83       	st	Z, r19
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	20 83       	st	Z, r18
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	23 e2       	ldi	r18, 0x23	; 35
 4e8:	20 83       	st	Z, r18
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	40 83       	st	Z, r20
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	50 83       	st	Z, r21
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	26 e2       	ldi	r18, 0x26	; 38
 4f6:	20 83       	st	Z, r18
 4f8:	31 97       	sbiw	r30, 0x01	; 1
 4fa:	27 e2       	ldi	r18, 0x27	; 39
 4fc:	20 83       	st	Z, r18
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	28 e2       	ldi	r18, 0x28	; 40
 502:	20 83       	st	Z, r18
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	29 e2       	ldi	r18, 0x29	; 41
 508:	20 83       	st	Z, r18
 50a:	31 97       	sbiw	r30, 0x01	; 1
 50c:	20 e3       	ldi	r18, 0x30	; 48
 50e:	20 83       	st	Z, r18
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	21 e3       	ldi	r18, 0x31	; 49
 514:	20 83       	st	Z, r18
 516:	86 97       	sbiw	r24, 0x26	; 38
 518:	08 95       	ret

0000051a <xPortStartScheduler>:
 51a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 51e:	8c e7       	ldi	r24, 0x7C	; 124
 520:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 524:	8b e0       	ldi	r24, 0x0B	; 11
 526:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 52a:	ef e6       	ldi	r30, 0x6F	; 111
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	82 60       	ori	r24, 0x02	; 2
 532:	80 83       	st	Z, r24
 534:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <pxCurrentTCB>
 538:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 53c:	cd 91       	ld	r28, X+
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	dd 91       	ld	r29, X+
 542:	de bf       	out	0x3e, r29	; 62
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	8f 90       	pop	r8
 574:	7f 90       	pop	r7
 576:	6f 90       	pop	r6
 578:	5f 90       	pop	r5
 57a:	4f 90       	pop	r4
 57c:	3f 90       	pop	r3
 57e:	2f 90       	pop	r2
 580:	1f 90       	pop	r1
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	08 95       	ret
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	08 95       	ret

0000058e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	0f 92       	push	r0
 596:	1f 92       	push	r1
 598:	11 24       	eor	r1, r1
 59a:	2f 92       	push	r2
 59c:	3f 92       	push	r3
 59e:	4f 92       	push	r4
 5a0:	5f 92       	push	r5
 5a2:	6f 92       	push	r6
 5a4:	7f 92       	push	r7
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
 5d6:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <pxCurrentTCB>
 5da:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 5de:	0d b6       	in	r0, 0x3d	; 61
 5e0:	0d 92       	st	X+, r0
 5e2:	0e b6       	in	r0, 0x3e	; 62
	vTaskSwitchContext();
 5e4:	0d 92       	st	X+, r0
	portRESTORE_CONTEXT();
 5e6:	70 d3       	rcall	.+1760   	; 0xcc8 <vTaskSwitchContext>
 5e8:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <pxCurrentTCB>
 5ec:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 5f0:	cd 91       	ld	r28, X+
 5f2:	cd bf       	out	0x3d, r28	; 61
 5f4:	dd 91       	ld	r29, X+
 5f6:	de bf       	out	0x3e, r29	; 62
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	df 90       	pop	r13
 61e:	cf 90       	pop	r12
 620:	bf 90       	pop	r11
 622:	af 90       	pop	r10
 624:	9f 90       	pop	r9
 626:	8f 90       	pop	r8
 628:	7f 90       	pop	r7
 62a:	6f 90       	pop	r6
 62c:	5f 90       	pop	r5
 62e:	4f 90       	pop	r4
 630:	3f 90       	pop	r3
 632:	2f 90       	pop	r2
 634:	1f 90       	pop	r1
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 63a:	0f 90       	pop	r0
 63c:	08 95       	ret

0000063e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 63e:	0f 92       	push	r0
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	0f 92       	push	r0
 646:	1f 92       	push	r1
 648:	11 24       	eor	r1, r1
 64a:	2f 92       	push	r2
 64c:	3f 92       	push	r3
 64e:	4f 92       	push	r4
 650:	5f 92       	push	r5
 652:	6f 92       	push	r6
 654:	7f 92       	push	r7
 656:	8f 92       	push	r8
 658:	9f 92       	push	r9
 65a:	af 92       	push	r10
 65c:	bf 92       	push	r11
 65e:	cf 92       	push	r12
 660:	df 92       	push	r13
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	2f 93       	push	r18
 66c:	3f 93       	push	r19
 66e:	4f 93       	push	r20
 670:	5f 93       	push	r21
 672:	6f 93       	push	r22
 674:	7f 93       	push	r23
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	af 93       	push	r26
 67c:	bf 93       	push	r27
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
 686:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <pxCurrentTCB>
 68a:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 68e:	0d b6       	in	r0, 0x3d	; 61
 690:	0d 92       	st	X+, r0
 692:	0e b6       	in	r0, 0x3e	; 62
	vTaskIncrementTick();
	vTaskSwitchContext();
 694:	0d 92       	st	X+, r0
 696:	85 d1       	rcall	.+778    	; 0x9a2 <vTaskIncrementTick>
	portRESTORE_CONTEXT();
 698:	17 d3       	rcall	.+1582   	; 0xcc8 <vTaskSwitchContext>
 69a:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <pxCurrentTCB>
 69e:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 6a2:	cd 91       	ld	r28, X+
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	dd 91       	ld	r29, X+
 6a8:	de bf       	out	0x3e, r29	; 62
 6aa:	ff 91       	pop	r31
 6ac:	ef 91       	pop	r30
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	bf 90       	pop	r11
 6d4:	af 90       	pop	r10
 6d6:	9f 90       	pop	r9
 6d8:	8f 90       	pop	r8
 6da:	7f 90       	pop	r7
 6dc:	6f 90       	pop	r6
 6de:	5f 90       	pop	r5
 6e0:	4f 90       	pop	r4
 6e2:	3f 90       	pop	r3
 6e4:	2f 90       	pop	r2
 6e6:	1f 90       	pop	r1
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63

	asm volatile ( "ret" );
 6ec:	0f 90       	pop	r0
 6ee:	08 95       	ret

000006f0 <__vector_13>:
}
 6f0:	a6 df       	rcall	.-180    	; 0x63e <vPortYieldFromTick>
 6f2:	18 95       	reti

000006f4 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	ec 01       	movw	r28, r24
 6fa:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxCurrentTCB>
 6fe:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 702:	93 83       	std	Z+3, r25	; 0x03
 704:	82 83       	std	Z+2, r24	; 0x02
 706:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTickCount>
 70a:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTickCount+0x1>
 70e:	c8 17       	cp	r28, r24
 710:	d9 07       	cpc	r29, r25
 712:	60 f4       	brcc	.+24     	; 0x72c <prvAddCurrentTaskToDelayedList+0x38>
 714:	60 91 46 07 	lds	r22, 0x0746	; 0x800746 <pxCurrentTCB>
 718:	70 91 47 07 	lds	r23, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 71c:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <pxOverflowDelayedTaskList>
 720:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <pxOverflowDelayedTaskList+0x1>
 724:	6e 5f       	subi	r22, 0xFE	; 254
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	43 dd       	rcall	.-1402   	; 0x1b0 <vListInsert>
 72a:	16 c0       	rjmp	.+44     	; 0x758 <prvAddCurrentTaskToDelayedList+0x64>
 72c:	60 91 46 07 	lds	r22, 0x0746	; 0x800746 <pxCurrentTCB>
 730:	70 91 47 07 	lds	r23, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 734:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <pxDelayedTaskList>
 738:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 73c:	6e 5f       	subi	r22, 0xFE	; 254
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	37 dd       	rcall	.-1426   	; 0x1b0 <vListInsert>
 742:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 746:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 74a:	c8 17       	cp	r28, r24
 74c:	d9 07       	cpc	r29, r25
 74e:	20 f4       	brcc	.+8      	; 0x758 <prvAddCurrentTaskToDelayedList+0x64>
 750:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 754:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <xTaskGenericCreate>:
 75e:	4f 92       	push	r4
 760:	5f 92       	push	r5
 762:	6f 92       	push	r6
 764:	7f 92       	push	r7
 766:	8f 92       	push	r8
 768:	9f 92       	push	r9
 76a:	af 92       	push	r10
 76c:	bf 92       	push	r11
 76e:	cf 92       	push	r12
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	0f 93       	push	r16
 778:	1f 93       	push	r17
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	5c 01       	movw	r10, r24
 780:	4b 01       	movw	r8, r22
 782:	3a 01       	movw	r6, r20
 784:	29 01       	movw	r4, r18
 786:	81 e2       	ldi	r24, 0x21	; 33
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	b4 dc       	rcall	.-1688   	; 0xf4 <pvPortMalloc>
 78c:	ec 01       	movw	r28, r24
 78e:	89 2b       	or	r24, r25
 790:	09 f4       	brne	.+2      	; 0x794 <xTaskGenericCreate+0x36>
 792:	c6 c0       	rjmp	.+396    	; 0x920 <xTaskGenericCreate+0x1c2>
 794:	c1 14       	cp	r12, r1
 796:	d1 04       	cpc	r13, r1
 798:	09 f0       	breq	.+2      	; 0x79c <xTaskGenericCreate+0x3e>
 79a:	be c0       	rjmp	.+380    	; 0x918 <xTaskGenericCreate+0x1ba>
 79c:	c3 01       	movw	r24, r6
 79e:	aa dc       	rcall	.-1708   	; 0xf4 <pvPortMalloc>
 7a0:	98 8f       	std	Y+24, r25	; 0x18
 7a2:	8f 8b       	std	Y+23, r24	; 0x17
 7a4:	00 97       	sbiw	r24, 0x00	; 0
 7a6:	19 f4       	brne	.+6      	; 0x7ae <xTaskGenericCreate+0x50>
 7a8:	ce 01       	movw	r24, r28
 7aa:	c8 dc       	rcall	.-1648   	; 0x13c <vPortFree>
 7ac:	b9 c0       	rjmp	.+370    	; 0x920 <xTaskGenericCreate+0x1c2>
 7ae:	a3 01       	movw	r20, r6
 7b0:	65 ea       	ldi	r22, 0xA5	; 165
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	fe d2       	rcall	.+1532   	; 0xdb2 <memset>
 7b6:	93 01       	movw	r18, r6
 7b8:	21 50       	subi	r18, 0x01	; 1
 7ba:	31 09       	sbc	r19, r1
 7bc:	8f 89       	ldd	r24, Y+23	; 0x17
 7be:	98 8d       	ldd	r25, Y+24	; 0x18
 7c0:	3c 01       	movw	r6, r24
 7c2:	62 0e       	add	r6, r18
 7c4:	73 1e       	adc	r7, r19
 7c6:	48 e0       	ldi	r20, 0x08	; 8
 7c8:	50 e0       	ldi	r21, 0x00	; 0
 7ca:	b4 01       	movw	r22, r8
 7cc:	ce 01       	movw	r24, r28
 7ce:	49 96       	adiw	r24, 0x19	; 25
 7d0:	f7 d2       	rcall	.+1518   	; 0xdc0 <strncpy>
 7d2:	18 a2       	std	Y+32, r1	; 0x20
 7d4:	10 2f       	mov	r17, r16
 7d6:	04 30       	cpi	r16, 0x04	; 4
 7d8:	08 f0       	brcs	.+2      	; 0x7dc <xTaskGenericCreate+0x7e>
 7da:	13 e0       	ldi	r17, 0x03	; 3
 7dc:	1e 8b       	std	Y+22, r17	; 0x16
 7de:	6e 01       	movw	r12, r28
 7e0:	82 e0       	ldi	r24, 0x02	; 2
 7e2:	c8 0e       	add	r12, r24
 7e4:	d1 1c       	adc	r13, r1
 7e6:	c6 01       	movw	r24, r12
 7e8:	b8 dc       	rcall	.-1680   	; 0x15a <vListInitialiseItem>
 7ea:	ce 01       	movw	r24, r28
 7ec:	0c 96       	adiw	r24, 0x0c	; 12
 7ee:	b5 dc       	rcall	.-1686   	; 0x15a <vListInitialiseItem>
 7f0:	d9 87       	std	Y+9, r29	; 0x09
 7f2:	c8 87       	std	Y+8, r28	; 0x08
 7f4:	84 e0       	ldi	r24, 0x04	; 4
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	81 1b       	sub	r24, r17
 7fa:	91 09       	sbc	r25, r1
 7fc:	9d 87       	std	Y+13, r25	; 0x0d
 7fe:	8c 87       	std	Y+12, r24	; 0x0c
 800:	db 8b       	std	Y+19, r29	; 0x13
 802:	ca 8b       	std	Y+18, r28	; 0x12
 804:	a2 01       	movw	r20, r4
 806:	b5 01       	movw	r22, r10
 808:	c3 01       	movw	r24, r6
 80a:	1b de       	rcall	.-970    	; 0x442 <pxPortInitialiseStack>
 80c:	99 83       	std	Y+1, r25	; 0x01
 80e:	88 83       	st	Y, r24
 810:	e1 14       	cp	r14, r1
 812:	f1 04       	cpc	r15, r1
 814:	19 f0       	breq	.+6      	; 0x81c <xTaskGenericCreate+0xbe>
 816:	f7 01       	movw	r30, r14
 818:	d1 83       	std	Z+1, r29	; 0x01
 81a:	c0 83       	st	Z, r28
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	0f 92       	push	r0
 822:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxCurrentNumberOfTasks>
 826:	8f 5f       	subi	r24, 0xFF	; 255
 828:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxCurrentNumberOfTasks>
 82c:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <pxCurrentTCB>
 830:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 834:	89 2b       	or	r24, r25
 836:	69 f5       	brne	.+90     	; 0x892 <xTaskGenericCreate+0x134>
 838:	d0 93 47 07 	sts	0x0747, r29	; 0x800747 <pxCurrentTCB+0x1>
 83c:	c0 93 46 07 	sts	0x0746, r28	; 0x800746 <pxCurrentTCB>
 840:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxCurrentNumberOfTasks>
 844:	81 30       	cpi	r24, 0x01	; 1
 846:	a1 f5       	brne	.+104    	; 0x8b0 <xTaskGenericCreate+0x152>
 848:	82 e2       	ldi	r24, 0x22	; 34
 84a:	97 e0       	ldi	r25, 0x07	; 7
 84c:	78 dc       	rcall	.-1808   	; 0x13e <vListInitialise>
 84e:	8b e2       	ldi	r24, 0x2B	; 43
 850:	97 e0       	ldi	r25, 0x07	; 7
 852:	75 dc       	rcall	.-1814   	; 0x13e <vListInitialise>
 854:	84 e3       	ldi	r24, 0x34	; 52
 856:	97 e0       	ldi	r25, 0x07	; 7
 858:	72 dc       	rcall	.-1820   	; 0x13e <vListInitialise>
 85a:	8d e3       	ldi	r24, 0x3D	; 61
 85c:	97 e0       	ldi	r25, 0x07	; 7
 85e:	6f dc       	rcall	.-1826   	; 0x13e <vListInitialise>
 860:	89 e1       	ldi	r24, 0x19	; 25
 862:	97 e0       	ldi	r25, 0x07	; 7
 864:	6c dc       	rcall	.-1832   	; 0x13e <vListInitialise>
 866:	80 e1       	ldi	r24, 0x10	; 16
 868:	97 e0       	ldi	r25, 0x07	; 7
 86a:	69 dc       	rcall	.-1838   	; 0x13e <vListInitialise>
 86c:	83 e0       	ldi	r24, 0x03	; 3
 86e:	97 e0       	ldi	r25, 0x07	; 7
 870:	66 dc       	rcall	.-1844   	; 0x13e <vListInitialise>
 872:	8a ef       	ldi	r24, 0xFA	; 250
 874:	96 e0       	ldi	r25, 0x06	; 6
 876:	63 dc       	rcall	.-1850   	; 0x13e <vListInitialise>
 878:	89 e1       	ldi	r24, 0x19	; 25
 87a:	97 e0       	ldi	r25, 0x07	; 7
 87c:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <pxDelayedTaskList+0x1>
 880:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <pxDelayedTaskList>
 884:	80 e1       	ldi	r24, 0x10	; 16
 886:	97 e0       	ldi	r25, 0x07	; 7
 888:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <pxOverflowDelayedTaskList+0x1>
 88c:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <pxOverflowDelayedTaskList>
 890:	0f c0       	rjmp	.+30     	; 0x8b0 <xTaskGenericCreate+0x152>
 892:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xSchedulerRunning>
 896:	81 11       	cpse	r24, r1
 898:	0b c0       	rjmp	.+22     	; 0x8b0 <xTaskGenericCreate+0x152>
 89a:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxCurrentTCB>
 89e:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 8a2:	86 89       	ldd	r24, Z+22	; 0x16
 8a4:	08 17       	cp	r16, r24
 8a6:	20 f0       	brcs	.+8      	; 0x8b0 <xTaskGenericCreate+0x152>
 8a8:	d0 93 47 07 	sts	0x0747, r29	; 0x800747 <pxCurrentTCB+0x1>
 8ac:	c0 93 46 07 	sts	0x0746, r28	; 0x800746 <pxCurrentTCB>
 8b0:	8e 89       	ldd	r24, Y+22	; 0x16
 8b2:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <uxTopUsedPriority>
 8b6:	98 17       	cp	r25, r24
 8b8:	10 f4       	brcc	.+4      	; 0x8be <xTaskGenericCreate+0x160>
 8ba:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTopUsedPriority>
 8be:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <uxTaskNumber>
 8c2:	9f 5f       	subi	r25, 0xFF	; 255
 8c4:	90 93 ee 06 	sts	0x06EE, r25	; 0x8006ee <uxTaskNumber>
 8c8:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <uxTopReadyPriority>
 8cc:	98 17       	cp	r25, r24
 8ce:	10 f4       	brcc	.+4      	; 0x8d4 <xTaskGenericCreate+0x176>
 8d0:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxTopReadyPriority>
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	9c 01       	movw	r18, r24
 8d8:	22 0f       	add	r18, r18
 8da:	33 1f       	adc	r19, r19
 8dc:	22 0f       	add	r18, r18
 8de:	33 1f       	adc	r19, r19
 8e0:	22 0f       	add	r18, r18
 8e2:	33 1f       	adc	r19, r19
 8e4:	82 0f       	add	r24, r18
 8e6:	93 1f       	adc	r25, r19
 8e8:	b6 01       	movw	r22, r12
 8ea:	8e 5d       	subi	r24, 0xDE	; 222
 8ec:	98 4f       	sbci	r25, 0xF8	; 248
 8ee:	39 dc       	rcall	.-1934   	; 0x162 <vListInsertEnd>
 8f0:	0f 90       	pop	r0
 8f2:	0f be       	out	0x3f, r0	; 63
 8f4:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xSchedulerRunning>
 8f8:	88 23       	and	r24, r24
 8fa:	51 f0       	breq	.+20     	; 0x910 <xTaskGenericCreate+0x1b2>
 8fc:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxCurrentTCB>
 900:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 904:	86 89       	ldd	r24, Z+22	; 0x16
 906:	80 17       	cp	r24, r16
 908:	28 f4       	brcc	.+10     	; 0x914 <xTaskGenericCreate+0x1b6>
 90a:	41 de       	rcall	.-894    	; 0x58e <vPortYield>
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	09 c0       	rjmp	.+18     	; 0x922 <xTaskGenericCreate+0x1c4>
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	07 c0       	rjmp	.+14     	; 0x922 <xTaskGenericCreate+0x1c4>
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	05 c0       	rjmp	.+10     	; 0x922 <xTaskGenericCreate+0x1c4>
 918:	d8 8e       	std	Y+24, r13	; 0x18
 91a:	cf 8a       	std	Y+23, r12	; 0x17
 91c:	c6 01       	movw	r24, r12
 91e:	47 cf       	rjmp	.-370    	; 0x7ae <xTaskGenericCreate+0x50>
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	1f 91       	pop	r17
 928:	0f 91       	pop	r16
 92a:	ff 90       	pop	r15
 92c:	ef 90       	pop	r14
 92e:	df 90       	pop	r13
 930:	cf 90       	pop	r12
 932:	bf 90       	pop	r11
 934:	af 90       	pop	r10
 936:	9f 90       	pop	r9
 938:	8f 90       	pop	r8
 93a:	7f 90       	pop	r7
 93c:	6f 90       	pop	r6
 93e:	5f 90       	pop	r5
 940:	4f 90       	pop	r4
 942:	08 95       	ret

00000944 <vTaskStartScheduler>:
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	a1 2c       	mov	r10, r1
 954:	b1 2c       	mov	r11, r1
 956:	c1 2c       	mov	r12, r1
 958:	d1 2c       	mov	r13, r1
 95a:	e1 2c       	mov	r14, r1
 95c:	f1 2c       	mov	r15, r1
 95e:	00 e0       	ldi	r16, 0x00	; 0
 960:	20 e0       	ldi	r18, 0x00	; 0
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	45 e5       	ldi	r20, 0x55	; 85
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	6a e0       	ldi	r22, 0x0A	; 10
 96a:	71 e0       	ldi	r23, 0x01	; 1
 96c:	8e e2       	ldi	r24, 0x2E	; 46
 96e:	96 e0       	ldi	r25, 0x06	; 6
 970:	f6 de       	rcall	.-532    	; 0x75e <xTaskGenericCreate>
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	41 f4       	brne	.+16     	; 0x986 <vTaskStartScheduler+0x42>
 976:	f8 94       	cli
 978:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xSchedulerRunning>
 97c:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xTickCount+0x1>
 980:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <xTickCount>
 984:	ca dd       	rcall	.-1132   	; 0x51a <xPortStartScheduler>
 986:	0f 91       	pop	r16
 988:	ff 90       	pop	r15
 98a:	ef 90       	pop	r14
 98c:	df 90       	pop	r13
 98e:	cf 90       	pop	r12
 990:	bf 90       	pop	r11
 992:	af 90       	pop	r10
 994:	08 95       	ret

00000996 <vTaskSuspendAll>:
 996:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 99a:	8f 5f       	subi	r24, 0xFF	; 255
 99c:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <uxSchedulerSuspended>
 9a0:	08 95       	ret

000009a2 <vTaskIncrementTick>:
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 9ae:	81 11       	cpse	r24, r1
 9b0:	af c0       	rjmp	.+350    	; 0xb10 <vTaskIncrementTick+0x16e>
 9b2:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTickCount>
 9b6:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTickCount+0x1>
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <xTickCount+0x1>
 9c0:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xTickCount>
 9c4:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTickCount>
 9c8:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTickCount+0x1>
 9cc:	89 2b       	or	r24, r25
 9ce:	99 f5       	brne	.+102    	; 0xa36 <vTaskIncrementTick+0x94>
 9d0:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <pxDelayedTaskList>
 9d4:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 9d8:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <pxOverflowDelayedTaskList>
 9dc:	30 91 0d 07 	lds	r19, 0x070D	; 0x80070d <pxOverflowDelayedTaskList+0x1>
 9e0:	30 93 0f 07 	sts	0x070F, r19	; 0x80070f <pxDelayedTaskList+0x1>
 9e4:	20 93 0e 07 	sts	0x070E, r18	; 0x80070e <pxDelayedTaskList>
 9e8:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <pxOverflowDelayedTaskList+0x1>
 9ec:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <pxOverflowDelayedTaskList>
 9f0:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <xNumOfOverflows>
 9f4:	8f 5f       	subi	r24, 0xFF	; 255
 9f6:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <xNumOfOverflows>
 9fa:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <pxDelayedTaskList>
 9fe:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 a02:	80 81       	ld	r24, Z
 a04:	81 11       	cpse	r24, r1
 a06:	07 c0       	rjmp	.+14     	; 0xa16 <vTaskIncrementTick+0x74>
 a08:	8f ef       	ldi	r24, 0xFF	; 255
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a10:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a14:	10 c0       	rjmp	.+32     	; 0xa36 <vTaskIncrementTick+0x94>
 a16:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <pxDelayedTaskList>
 a1a:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 a1e:	05 80       	ldd	r0, Z+5	; 0x05
 a20:	f6 81       	ldd	r31, Z+6	; 0x06
 a22:	e0 2d       	mov	r30, r0
 a24:	06 80       	ldd	r0, Z+6	; 0x06
 a26:	f7 81       	ldd	r31, Z+7	; 0x07
 a28:	e0 2d       	mov	r30, r0
 a2a:	82 81       	ldd	r24, Z+2	; 0x02
 a2c:	93 81       	ldd	r25, Z+3	; 0x03
 a2e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a32:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a36:	20 91 f6 06 	lds	r18, 0x06F6	; 0x8006f6 <xTickCount>
 a3a:	30 91 f7 06 	lds	r19, 0x06F7	; 0x8006f7 <xTickCount+0x1>
 a3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 a42:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 a46:	28 17       	cp	r18, r24
 a48:	39 07       	cpc	r19, r25
 a4a:	08 f4       	brcc	.+2      	; 0xa4e <vTaskIncrementTick+0xac>
 a4c:	66 c0       	rjmp	.+204    	; 0xb1a <vTaskIncrementTick+0x178>
 a4e:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <pxDelayedTaskList>
 a52:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 a56:	80 81       	ld	r24, Z
 a58:	88 23       	and	r24, r24
 a5a:	99 f0       	breq	.+38     	; 0xa82 <vTaskIncrementTick+0xe0>
 a5c:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <pxDelayedTaskList>
 a60:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 a64:	05 80       	ldd	r0, Z+5	; 0x05
 a66:	f6 81       	ldd	r31, Z+6	; 0x06
 a68:	e0 2d       	mov	r30, r0
 a6a:	c6 81       	ldd	r28, Z+6	; 0x06
 a6c:	d7 81       	ldd	r29, Z+7	; 0x07
 a6e:	8a 81       	ldd	r24, Y+2	; 0x02
 a70:	9b 81       	ldd	r25, Y+3	; 0x03
 a72:	20 91 f6 06 	lds	r18, 0x06F6	; 0x8006f6 <xTickCount>
 a76:	30 91 f7 06 	lds	r19, 0x06F7	; 0x8006f7 <xTickCount+0x1>
 a7a:	28 17       	cp	r18, r24
 a7c:	39 07       	cpc	r19, r25
 a7e:	f8 f4       	brcc	.+62     	; 0xabe <vTaskIncrementTick+0x11c>
 a80:	19 c0       	rjmp	.+50     	; 0xab4 <vTaskIncrementTick+0x112>
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a8a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a8e:	45 c0       	rjmp	.+138    	; 0xb1a <vTaskIncrementTick+0x178>
 a90:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <pxDelayedTaskList>
 a94:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 a98:	05 80       	ldd	r0, Z+5	; 0x05
 a9a:	f6 81       	ldd	r31, Z+6	; 0x06
 a9c:	e0 2d       	mov	r30, r0
 a9e:	c6 81       	ldd	r28, Z+6	; 0x06
 aa0:	d7 81       	ldd	r29, Z+7	; 0x07
 aa2:	8a 81       	ldd	r24, Y+2	; 0x02
 aa4:	9b 81       	ldd	r25, Y+3	; 0x03
 aa6:	20 91 f6 06 	lds	r18, 0x06F6	; 0x8006f6 <xTickCount>
 aaa:	30 91 f7 06 	lds	r19, 0x06F7	; 0x8006f7 <xTickCount+0x1>
 aae:	28 17       	cp	r18, r24
 ab0:	39 07       	cpc	r19, r25
 ab2:	28 f4       	brcc	.+10     	; 0xabe <vTaskIncrementTick+0x11c>
 ab4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 ab8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 abc:	2e c0       	rjmp	.+92     	; 0xb1a <vTaskIncrementTick+0x178>
 abe:	8e 01       	movw	r16, r28
 ac0:	0e 5f       	subi	r16, 0xFE	; 254
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	c8 01       	movw	r24, r16
 ac6:	af db       	rcall	.-2210   	; 0x226 <vListRemove>
 ac8:	8c 89       	ldd	r24, Y+20	; 0x14
 aca:	9d 89       	ldd	r25, Y+21	; 0x15
 acc:	89 2b       	or	r24, r25
 ace:	19 f0       	breq	.+6      	; 0xad6 <vTaskIncrementTick+0x134>
 ad0:	ce 01       	movw	r24, r28
 ad2:	0c 96       	adiw	r24, 0x0c	; 12
 ad4:	a8 db       	rcall	.-2224   	; 0x226 <vListRemove>
 ad6:	8e 89       	ldd	r24, Y+22	; 0x16
 ad8:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <uxTopReadyPriority>
 adc:	98 17       	cp	r25, r24
 ade:	10 f4       	brcc	.+4      	; 0xae4 <vTaskIncrementTick+0x142>
 ae0:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxTopReadyPriority>
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	9c 01       	movw	r18, r24
 ae8:	22 0f       	add	r18, r18
 aea:	33 1f       	adc	r19, r19
 aec:	22 0f       	add	r18, r18
 aee:	33 1f       	adc	r19, r19
 af0:	22 0f       	add	r18, r18
 af2:	33 1f       	adc	r19, r19
 af4:	82 0f       	add	r24, r18
 af6:	93 1f       	adc	r25, r19
 af8:	b8 01       	movw	r22, r16
 afa:	8e 5d       	subi	r24, 0xDE	; 222
 afc:	98 4f       	sbci	r25, 0xF8	; 248
 afe:	31 db       	rcall	.-2462   	; 0x162 <vListInsertEnd>
 b00:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <pxDelayedTaskList>
 b04:	f0 91 0f 07 	lds	r31, 0x070F	; 0x80070f <pxDelayedTaskList+0x1>
 b08:	80 81       	ld	r24, Z
 b0a:	81 11       	cpse	r24, r1
 b0c:	c1 cf       	rjmp	.-126    	; 0xa90 <vTaskIncrementTick+0xee>
 b0e:	b9 cf       	rjmp	.-142    	; 0xa82 <vTaskIncrementTick+0xe0>
 b10:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <uxMissedTicks>
 b14:	8f 5f       	subi	r24, 0xFF	; 255
 b16:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <uxMissedTicks>
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	1f 91       	pop	r17
 b20:	0f 91       	pop	r16
 b22:	08 95       	ret

00000b24 <xTaskResumeAll>:
 b24:	cf 92       	push	r12
 b26:	df 92       	push	r13
 b28:	ef 92       	push	r14
 b2a:	ff 92       	push	r15
 b2c:	0f 93       	push	r16
 b2e:	1f 93       	push	r17
 b30:	cf 93       	push	r28
 b32:	df 93       	push	r29
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	0f 92       	push	r0
 b3a:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 b3e:	81 50       	subi	r24, 0x01	; 1
 b40:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <uxSchedulerSuspended>
 b44:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 b48:	81 11       	cpse	r24, r1
 b4a:	5f c0       	rjmp	.+190    	; 0xc0a <xTaskResumeAll+0xe6>
 b4c:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxCurrentNumberOfTasks>
 b50:	81 11       	cpse	r24, r1
 b52:	2f c0       	rjmp	.+94     	; 0xbb2 <xTaskResumeAll+0x8e>
 b54:	5d c0       	rjmp	.+186    	; 0xc10 <xTaskResumeAll+0xec>
 b56:	d7 01       	movw	r26, r14
 b58:	15 96       	adiw	r26, 0x05	; 5
 b5a:	ed 91       	ld	r30, X+
 b5c:	fc 91       	ld	r31, X
 b5e:	16 97       	sbiw	r26, 0x06	; 6
 b60:	c6 81       	ldd	r28, Z+6	; 0x06
 b62:	d7 81       	ldd	r29, Z+7	; 0x07
 b64:	ce 01       	movw	r24, r28
 b66:	0c 96       	adiw	r24, 0x0c	; 12
 b68:	5e db       	rcall	.-2372   	; 0x226 <vListRemove>
 b6a:	8e 01       	movw	r16, r28
 b6c:	0e 5f       	subi	r16, 0xFE	; 254
 b6e:	1f 4f       	sbci	r17, 0xFF	; 255
 b70:	c8 01       	movw	r24, r16
 b72:	59 db       	rcall	.-2382   	; 0x226 <vListRemove>
 b74:	8e 89       	ldd	r24, Y+22	; 0x16
 b76:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <uxTopReadyPriority>
 b7a:	98 17       	cp	r25, r24
 b7c:	10 f4       	brcc	.+4      	; 0xb82 <xTaskResumeAll+0x5e>
 b7e:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxTopReadyPriority>
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	9c 01       	movw	r18, r24
 b86:	22 0f       	add	r18, r18
 b88:	33 1f       	adc	r19, r19
 b8a:	22 0f       	add	r18, r18
 b8c:	33 1f       	adc	r19, r19
 b8e:	22 0f       	add	r18, r18
 b90:	33 1f       	adc	r19, r19
 b92:	82 0f       	add	r24, r18
 b94:	93 1f       	adc	r25, r19
 b96:	b8 01       	movw	r22, r16
 b98:	8e 5d       	subi	r24, 0xDE	; 222
 b9a:	98 4f       	sbci	r25, 0xF8	; 248
 b9c:	e2 da       	rcall	.-2620   	; 0x162 <vListInsertEnd>
 b9e:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <pxCurrentTCB>
 ba2:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
 ba6:	9e 89       	ldd	r25, Y+22	; 0x16
 ba8:	86 89       	ldd	r24, Z+22	; 0x16
 baa:	98 17       	cp	r25, r24
 bac:	58 f0       	brcs	.+22     	; 0xbc4 <xTaskResumeAll+0xa0>
 bae:	dc 2c       	mov	r13, r12
 bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <xTaskResumeAll+0xa0>
 bb2:	d1 2c       	mov	r13, r1
 bb4:	0f 2e       	mov	r0, r31
 bb6:	f3 e0       	ldi	r31, 0x03	; 3
 bb8:	ef 2e       	mov	r14, r31
 bba:	f7 e0       	ldi	r31, 0x07	; 7
 bbc:	ff 2e       	mov	r15, r31
 bbe:	f0 2d       	mov	r31, r0
 bc0:	cc 24       	eor	r12, r12
 bc2:	c3 94       	inc	r12
 bc4:	f7 01       	movw	r30, r14
 bc6:	80 81       	ld	r24, Z
 bc8:	81 11       	cpse	r24, r1
 bca:	c5 cf       	rjmp	.-118    	; 0xb56 <xTaskResumeAll+0x32>
 bcc:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <uxMissedTicks>
 bd0:	88 23       	and	r24, r24
 bd2:	79 f0       	breq	.+30     	; 0xbf2 <xTaskResumeAll+0xce>
 bd4:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <uxMissedTicks>
 bd8:	88 23       	and	r24, r24
 bda:	91 f0       	breq	.+36     	; 0xc00 <xTaskResumeAll+0xdc>
 bdc:	e2 de       	rcall	.-572    	; 0x9a2 <vTaskIncrementTick>
 bde:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <uxMissedTicks>
 be2:	81 50       	subi	r24, 0x01	; 1
 be4:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <uxMissedTicks>
 be8:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <uxMissedTicks>
 bec:	81 11       	cpse	r24, r1
 bee:	f6 cf       	rjmp	.-20     	; 0xbdc <xTaskResumeAll+0xb8>
 bf0:	07 c0       	rjmp	.+14     	; 0xc00 <xTaskResumeAll+0xdc>
 bf2:	f1 e0       	ldi	r31, 0x01	; 1
 bf4:	df 16       	cp	r13, r31
 bf6:	21 f0       	breq	.+8      	; 0xc00 <xTaskResumeAll+0xdc>
 bf8:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <xMissedYield>
 bfc:	81 30       	cpi	r24, 0x01	; 1
 bfe:	39 f4       	brne	.+14     	; 0xc0e <xTaskResumeAll+0xea>
 c00:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <xMissedYield>
 c04:	c4 dc       	rcall	.-1656   	; 0x58e <vPortYield>
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	03 c0       	rjmp	.+6      	; 0xc10 <xTaskResumeAll+0xec>
 c0a:	80 e0       	ldi	r24, 0x00	; 0
 c0c:	01 c0       	rjmp	.+2      	; 0xc10 <xTaskResumeAll+0xec>
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	0f 90       	pop	r0
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	df 91       	pop	r29
 c16:	cf 91       	pop	r28
 c18:	1f 91       	pop	r17
 c1a:	0f 91       	pop	r16
 c1c:	ff 90       	pop	r15
 c1e:	ef 90       	pop	r14
 c20:	df 90       	pop	r13
 c22:	cf 90       	pop	r12
 c24:	08 95       	ret

00000c26 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c2c:	89 2b       	or	r24, r25
		{
			vTaskSuspendAll();
 c2e:	91 f0       	breq	.+36     	; 0xc54 <vTaskDelay+0x2e>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c30:	b2 de       	rcall	.-668    	; 0x996 <vTaskSuspendAll>
 c32:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTickCount>
 c36:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTickCount+0x1>
 c3a:	c8 0f       	add	r28, r24

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c3c:	d9 1f       	adc	r29, r25
 c3e:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <pxCurrentTCB>
 c42:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <pxCurrentTCB+0x1>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
			}
			xAlreadyYielded = xTaskResumeAll();
 c46:	02 96       	adiw	r24, 0x02	; 2
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c48:	ee da       	rcall	.-2596   	; 0x226 <vListRemove>
 c4a:	ce 01       	movw	r24, r28
		{
			portYIELD_WITHIN_API();
 c4c:	53 dd       	rcall	.-1370   	; 0x6f4 <prvAddCurrentTaskToDelayedList>
 c4e:	6a df       	rcall	.-300    	; 0xb24 <xTaskResumeAll>
		}
	}
 c50:	81 11       	cpse	r24, r1
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <vTaskDelay+0x30>
 c54:	9c dc       	rcall	.-1736   	; 0x58e <vPortYield>
 c56:	df 91       	pop	r29
 c58:	cf 91       	pop	r28
 c5a:	08 95       	ret

00000c5c <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c5c:	0f 2e       	mov	r0, r31
 c5e:	fa ef       	ldi	r31, 0xFA	; 250
 c60:	ef 2e       	mov	r14, r31
 c62:	f6 e0       	ldi	r31, 0x06	; 6
 c64:	ff 2e       	mov	r15, r31
 c66:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c68:	c2 e2       	ldi	r28, 0x22	; 34
 c6a:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c6c:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTasksDeleted>
 c70:	88 23       	and	r24, r24
		{
			vTaskSuspendAll();
 c72:	29 f1       	breq	.+74     	; 0xcbe <prvIdleTask+0x62>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c74:	90 de       	rcall	.-736    	; 0x996 <vTaskSuspendAll>
			xTaskResumeAll();
 c76:	d7 01       	movw	r26, r14
 c78:	1c 91       	ld	r17, X

			if( xListIsEmpty == pdFALSE )
 c7a:	54 df       	rcall	.-344    	; 0xb24 <xTaskResumeAll>
 c7c:	11 23       	and	r17, r17
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c7e:	f9 f0       	breq	.+62     	; 0xcbe <prvIdleTask+0x62>
 c80:	0f b6       	in	r0, 0x3f	; 63
 c82:	f8 94       	cli
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c84:	0f 92       	push	r0
 c86:	d7 01       	movw	r26, r14
 c88:	15 96       	adiw	r26, 0x05	; 5
 c8a:	ed 91       	ld	r30, X+
 c8c:	fc 91       	ld	r31, X
 c8e:	16 97       	sbiw	r26, 0x06	; 6
					vListRemove( &( pxTCB->xGenericListItem ) );
 c90:	06 81       	ldd	r16, Z+6	; 0x06
 c92:	17 81       	ldd	r17, Z+7	; 0x07
 c94:	c8 01       	movw	r24, r16
					--uxCurrentNumberOfTasks;
 c96:	02 96       	adiw	r24, 0x02	; 2
 c98:	c6 da       	rcall	.-2676   	; 0x226 <vListRemove>
 c9a:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxCurrentNumberOfTasks>
 c9e:	81 50       	subi	r24, 0x01	; 1
					--uxTasksDeleted;
 ca0:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxCurrentNumberOfTasks>
 ca4:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <uxTasksDeleted>
 ca8:	81 50       	subi	r24, 0x01	; 1
				}
				taskEXIT_CRITICAL();
 caa:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <uxTasksDeleted>
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 cae:	0f 90       	pop	r0
 cb0:	0f be       	out	0x3f, r0	; 63
		vPortFree( pxTCB );
 cb2:	f8 01       	movw	r30, r16
 cb4:	87 89       	ldd	r24, Z+23	; 0x17

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 cb6:	90 8d       	ldd	r25, Z+24	; 0x18
 cb8:	41 da       	rcall	.-2942   	; 0x13c <vPortFree>
 cba:	c8 01       	movw	r24, r16
			{
				taskYIELD();
 cbc:	3f da       	rcall	.-2946   	; 0x13c <vPortFree>
 cbe:	88 81       	ld	r24, Y
 cc0:	82 30       	cpi	r24, 0x02	; 2
 cc2:	a0 f2       	brcs	.-88     	; 0xc6c <prvIdleTask+0x10>
 cc4:	64 dc       	rcall	.-1848   	; 0x58e <vPortYield>
 cc6:	d2 cf       	rjmp	.-92     	; 0xc6c <prvIdleTask+0x10>

00000cc8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 cc8:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 ccc:	81 11       	cpse	r24, r1
 cce:	13 c0       	rjmp	.+38     	; 0xcf6 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cd0:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxTopReadyPriority>
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	fc 01       	movw	r30, r24
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	ee 0f       	add	r30, r30
 cde:	ff 1f       	adc	r31, r31
 ce0:	ee 0f       	add	r30, r30
 ce2:	ff 1f       	adc	r31, r31
 ce4:	8e 0f       	add	r24, r30
 ce6:	9f 1f       	adc	r25, r31
 ce8:	fc 01       	movw	r30, r24
 cea:	ee 5d       	subi	r30, 0xDE	; 222
 cec:	f8 4f       	sbci	r31, 0xF8	; 248
 cee:	80 81       	ld	r24, Z
 cf0:	88 23       	and	r24, r24
 cf2:	29 f0       	breq	.+10     	; 0xcfe <vTaskSwitchContext+0x36>
 cf4:	1b c0       	rjmp	.+54     	; 0xd2c <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <xMissedYield>
 cfc:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 cfe:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxTopReadyPriority>
 d02:	81 50       	subi	r24, 0x01	; 1
 d04:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d08:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxTopReadyPriority>
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	fc 01       	movw	r30, r24
 d10:	ee 0f       	add	r30, r30
 d12:	ff 1f       	adc	r31, r31
 d14:	ee 0f       	add	r30, r30
 d16:	ff 1f       	adc	r31, r31
 d18:	ee 0f       	add	r30, r30
 d1a:	ff 1f       	adc	r31, r31
 d1c:	8e 0f       	add	r24, r30
 d1e:	9f 1f       	adc	r25, r31
 d20:	fc 01       	movw	r30, r24
 d22:	ee 5d       	subi	r30, 0xDE	; 222
 d24:	f8 4f       	sbci	r31, 0xF8	; 248
 d26:	80 81       	ld	r24, Z
 d28:	88 23       	and	r24, r24
 d2a:	49 f3       	breq	.-46     	; 0xcfe <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d2c:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <uxTopReadyPriority>
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	9c 01       	movw	r18, r24
 d34:	22 0f       	add	r18, r18
 d36:	33 1f       	adc	r19, r19
 d38:	22 0f       	add	r18, r18
 d3a:	33 1f       	adc	r19, r19
 d3c:	22 0f       	add	r18, r18
 d3e:	33 1f       	adc	r19, r19
 d40:	28 0f       	add	r18, r24
 d42:	39 1f       	adc	r19, r25
 d44:	d9 01       	movw	r26, r18
 d46:	ae 5d       	subi	r26, 0xDE	; 222
 d48:	b8 4f       	sbci	r27, 0xF8	; 248
 d4a:	11 96       	adiw	r26, 0x01	; 1
 d4c:	ed 91       	ld	r30, X+
 d4e:	fc 91       	ld	r31, X
 d50:	12 97       	sbiw	r26, 0x02	; 2
 d52:	02 80       	ldd	r0, Z+2	; 0x02
 d54:	f3 81       	ldd	r31, Z+3	; 0x03
 d56:	e0 2d       	mov	r30, r0
 d58:	12 96       	adiw	r26, 0x02	; 2
 d5a:	fc 93       	st	X, r31
 d5c:	ee 93       	st	-X, r30
 d5e:	11 97       	sbiw	r26, 0x01	; 1
 d60:	2b 5d       	subi	r18, 0xDB	; 219
 d62:	38 4f       	sbci	r19, 0xF8	; 248
 d64:	e2 17       	cp	r30, r18
 d66:	f3 07       	cpc	r31, r19
 d68:	29 f4       	brne	.+10     	; 0xd74 <vTaskSwitchContext+0xac>
 d6a:	22 81       	ldd	r18, Z+2	; 0x02
 d6c:	33 81       	ldd	r19, Z+3	; 0x03
 d6e:	fd 01       	movw	r30, r26
 d70:	32 83       	std	Z+2, r19	; 0x02
 d72:	21 83       	std	Z+1, r18	; 0x01
 d74:	fc 01       	movw	r30, r24
 d76:	ee 0f       	add	r30, r30
 d78:	ff 1f       	adc	r31, r31
 d7a:	ee 0f       	add	r30, r30
 d7c:	ff 1f       	adc	r31, r31
 d7e:	ee 0f       	add	r30, r30
 d80:	ff 1f       	adc	r31, r31
 d82:	8e 0f       	add	r24, r30
 d84:	9f 1f       	adc	r25, r31
 d86:	fc 01       	movw	r30, r24
 d88:	ee 5d       	subi	r30, 0xDE	; 222
 d8a:	f8 4f       	sbci	r31, 0xF8	; 248
 d8c:	01 80       	ldd	r0, Z+1	; 0x01
 d8e:	f2 81       	ldd	r31, Z+2	; 0x02
 d90:	e0 2d       	mov	r30, r0
 d92:	86 81       	ldd	r24, Z+6	; 0x06
 d94:	97 81       	ldd	r25, Z+7	; 0x07
 d96:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <pxCurrentTCB+0x1>
 d9a:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <pxCurrentTCB>
 d9e:	08 95       	ret

00000da0 <__tablejump2__>:
 da0:	ee 0f       	add	r30, r30
 da2:	ff 1f       	adc	r31, r31
 da4:	00 24       	eor	r0, r0
 da6:	00 1c       	adc	r0, r0
 da8:	0b be       	out	0x3b, r0	; 59
 daa:	07 90       	elpm	r0, Z+
 dac:	f6 91       	elpm	r31, Z
 dae:	e0 2d       	mov	r30, r0
 db0:	09 94       	ijmp

00000db2 <memset>:
 db2:	dc 01       	movw	r26, r24
 db4:	01 c0       	rjmp	.+2      	; 0xdb8 <memset+0x6>
 db6:	6d 93       	st	X+, r22
 db8:	41 50       	subi	r20, 0x01	; 1
 dba:	50 40       	sbci	r21, 0x00	; 0
 dbc:	e0 f7       	brcc	.-8      	; 0xdb6 <memset+0x4>
 dbe:	08 95       	ret

00000dc0 <strncpy>:
 dc0:	fb 01       	movw	r30, r22
 dc2:	dc 01       	movw	r26, r24
 dc4:	41 50       	subi	r20, 0x01	; 1
 dc6:	50 40       	sbci	r21, 0x00	; 0
 dc8:	48 f0       	brcs	.+18     	; 0xddc <strncpy+0x1c>
 dca:	01 90       	ld	r0, Z+
 dcc:	0d 92       	st	X+, r0
 dce:	00 20       	and	r0, r0
 dd0:	c9 f7       	brne	.-14     	; 0xdc4 <strncpy+0x4>
 dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <strncpy+0x16>
 dd4:	1d 92       	st	X+, r1
 dd6:	41 50       	subi	r20, 0x01	; 1
 dd8:	50 40       	sbci	r21, 0x00	; 0
 dda:	e0 f7       	brcc	.-8      	; 0xdd4 <strncpy+0x14>
 ddc:	08 95       	ret

00000dde <_exit>:
 dde:	f8 94       	cli

00000de0 <__stop_program>:
 de0:	ff cf       	rjmp	.-2      	; 0xde0 <__stop_program>
